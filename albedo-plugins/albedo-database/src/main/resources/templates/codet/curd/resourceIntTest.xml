<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>resource</name>
	<filePath>src/test/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}ResourceIntTest.java</fileName>
	<content><![CDATA[
/*
 *  Copyright (c) 2019-2021  <a href="https://github.com/somowhere/albedo">Albedo</a>, somewhere (somewhere0813@gmail.com).
 *  <p>
 *  Licensed under the GNU Lesser General Public License 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  <p>
 * https://www.gnu.org/licenses/lgpl.html
 *  <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import cn.hutool.core.date.DateField;
import com.albedo.java.common.core.config.ApplicationProperties;
import com.albedo.java.common.core.exception.handler.GlobalExceptionHandler;
import com.albedo.java.common.core.util.ClassUtil;
import com.albedo.java.common.core.util.DateUtil;
import com.albedo.java.common.core.vo.PageModel;
import com.albedo.java.modules.TestUtil;
import ${packageName}.${moduleName}.domain.${ClassName};
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dto;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}QueryCriteria;
import ${packageName}.${moduleName}.repository<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Repository;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Resource;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;


import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the ${ClassName}Resource REST controller.
 *
 * @see ${ClassName}Resource
 */
@SpringBootTest(classes = ${applicationName}.class)
@Slf4j
public class ${ClassName}ResourceIntTest {

    private String DEFAULT_API_URL;
    <#list table.columnList as column>
		<#if column.query || (column.edit && (column.isNotBaseField || column.simpleJavaField == 'description'))>
		<#if column.simpleJavaType == "Integer">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final int DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final int UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Long">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final Long DEFAULT_${column.constantJavaField} = 0L;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final Long UPDATED_${column.constantJavaField} = 1L;
		<#elseif column.simpleJavaType == "Double">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final double DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final double UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Float">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final float DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final float UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Date">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final ${column.simpleJavaType} DEFAULT_${column.constantJavaField} = DateUtil.parse(DateUtil.format(new Date(),DateUtil.TIME_FORMAT),DateUtil.TIME_FORMAT).toJdkDate();
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final ${column.simpleJavaType} UPDATED_${column.constantJavaField} = DateUtil.offset(DEFAULT_${column.constantJavaField}, DateField.DAY_OF_YEAR, 1);
		<#else>
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final ${column.simpleJavaType} DEFAULT_${column.constantJavaField} = <#if column.name?contains('mail')>"1@albedo.com"<#else>"A"</#if>;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final ${column.simpleJavaType} UPDATED_${column.constantJavaField} = <#if column.name?contains('mail')>"2@albedo.com"<#else>"B"</#if>;
		</#if>
		</#if>
	</#list>

    @Autowired
	private ${ClassName}Service ${className}Service;

	private MockMvc rest${ClassName}MockMvc;
	@Autowired
	private MappingJackson2HttpMessageConverter jacksonMessageConverter;
	@Autowired
	private GlobalExceptionHandler globalExceptionHandler;
	@Autowired
	private ApplicationProperties applicationProperties;

	private ${ClassName}Dto ${className}Dto;

	private ${ClassName}Dto another${ClassName}Dto = new ${ClassName}Dto();
	@BeforeEach
	public void setup() {
		DEFAULT_API_URL = applicationProperties.getAdminPath("/${urlPrefix}/");
		MockitoAnnotations.openMocks(this);
		final ${ClassName}Resource ${className}Resource = new ${ClassName}Resource(${className}Service);
		this.rest${ClassName}MockMvc = MockMvcBuilders.standaloneSetup(${className}Resource)
			.addPlaceholderValue(TestUtil.ADMIN_PATH, applicationProperties.getAdminPath())
			.setControllerAdvice(globalExceptionHandler)
			.setConversionService(TestUtil.createFormattingConversionService())
			.setMessageConverters(jacksonMessageConverter)
			.build();
	}

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static ${ClassName}Dto createEntity() {
        ${ClassName}Dto ${className}Dto = ClassUtil.createObj(${ClassName}Dto.class, Lists.newArrayList(
    <#assign firstListField = true>
    <#list table.columnList as column>
		<#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>${ClassName}Dto.F_${column.constantJavaField}
		</#if>
	</#list>
        ), <#assign firstListField = true><#list table.columnList as column>
        <#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')><#if firstListField> <#assign firstListField = false><#else>,</#if>DEFAULT_${column.constantJavaField}
		</#if>
	</#list>);
        return ${className}Dto;
    }

    @BeforeEach
    public void initTest() {
        ${className}Dto = createEntity();
    }

    @Test
    @Transactional
    public void create${ClassName}() throws Exception {
        int databaseSizeBeforeCreate = ${className}Service.list().size();
        // Create the ${ClassName}
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
			.param(PageModel.F_DESC, ${ClassName}.F_SQL_CREATED_DATE)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Dto)))
            .andExpect(status().isOk());
        ;
        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.list(
            Wrappers.<${ClassName}>query().lambda().orderByAsc(
				${ClassName}::getCreatedDate
			)
        );
        assertThat(${className}List).hasSize(databaseSizeBeforeCreate + 1);
        ${ClassName} test${ClassName} = ${className}List.get(${className}List.size() - 1);
    <#list table.columnList as column>
		<#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')>
		assertThat(test${ClassName}.get${column.simpleJavaField?cap_first}()).isEqualTo(DEFAULT_${column.constantJavaField});
		</#if>
	</#list>
    }
<#list table.columnList as column>
    <#if column.edit && column.unique && (column.isNotBaseField || column.simpleJavaField == 'description')>
    @Test
    @Transactional
    public void create${ClassName}WithExisting${column.simpleJavaField?cap_first}() throws Exception {
        ${className}Service.saveOrUpdate(${className}Dto);
        int databaseSizeBeforeCreate = ${className}Service.list().size();

        // Create the ${ClassName} with an existing ID
        ${ClassName}Dto ${className}DtoNew = ClassUtil.createObj(${ClassName}Dto.class, Lists.newArrayList(${ClassName}Dto.F_ID, ${ClassName}Dto.F_${column.constantJavaField}),
            null, ${className}Dto.get${column.simpleJavaField?cap_first}());

        // An entity with an existing ID cannot be created, so this API call must fail
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}DtoNew)))
            .andExpect(status().isBadRequest());

        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.list();
        assertThat(${className}List).hasSize(databaseSizeBeforeCreate);
    }
    </#if>
</#list>

<#list table.columnList as column>
    <#if column.edit && !column.null && (column.isNotBaseField || column.simpleJavaField == 'description')>
    @Test
    @Transactional
    public void check${column.simpleJavaField?cap_first}IsRequired() throws Exception {
        int databaseSizeBeforeTest = ${className}Service.list().size();
        // set the field null
        ${className}Dto.set${column.simpleJavaField?cap_first}(null);

        // Create the ${ClassName}, which fails.

        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Dto)))
            .andExpect(status().isBadRequest());

        List<${ClassName}> ${className}List = ${className}Service.list();
        assertThat(${className}List).hasSize(databaseSizeBeforeTest);
    }
    </#if>
</#list>


    @Test
    @Transactional
    public void getAll${ClassName}s() throws Exception {
        // Initialize the database
        ${className}Service.saveOrUpdate(${className}Dto);

        // Get all the ${className}List
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.records.[*].${column.simpleJavaField}").value(hasItem(${className}Dto.get${column.simpleJavaField?cap_first}())))
        <#elseif column.edit && column.null && (column.isNotBaseField || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.records.[*].${column.simpleJavaField}").value(hasItem(<#if column.simpleJavaType == "Date">DateUtil.formatDateTime(DEFAULT_${column.constantJavaField})<#elseif column.simpleJavaType == "Long">DEFAULT_${column.constantJavaField}.intValue()<#else>DEFAULT_${column.constantJavaField}</#if>)))
        </#if>
    </#list>;
    }

    @Test
    @Transactional
    public void get${ClassName}() throws Exception {
        // Initialize the database
        ${className}Service.saveOrUpdate(${className}Dto);

        // Get the ${className}
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"{id}", ${className}Dto.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.${column.simpleJavaField}").value(${className}Dto.get${column.simpleJavaField?cap_first}()))
        <#elseif column.edit && column.null && (column.isNotBaseField || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.${column.simpleJavaField}").value(<#if column.simpleJavaType == "Date">DateUtil.formatDateTime(DEFAULT_${column.constantJavaField})<#else>DEFAULT_${column.constantJavaField}</#if>))
        </#if>
    </#list>;
    }
<#list table.columnList as column>
    <#if column.query>
    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}Search() throws Exception {
        // Initialize the database
        ${className}Service.saveOrUpdate(${className}Dto);

		${ClassName}QueryCriteria ${className}QueryCriteria = new ${ClassName}QueryCriteria();
		${className}QueryCriteria.set${column.simpleJavaField?cap_first}(<#if column.queryType?? && (column.queryType == "between" || column.queryType == "in")><#if column.simpleJavaType == 'Date'>Lists.newArrayList(DateUtil.offset(DEFAULT_${column.constantJavaField}, DateField.MINUTE, -1), DateUtil.offset(DEFAULT_${column.constantJavaField}, DateField.MINUTE, 1))<#else>Lists.newArrayList(DEFAULT_${column.constantJavaField}, DEFAULT_${column.constantJavaField})</#if><#else>DEFAULT_${column.constantJavaField}</#if>);
        // Get all the ${className}List where ${column.simpleJavaField} equals to DEFAULT_${column.constantJavaField}
        default${ClassName}ShouldBeFound(${className}QueryCriteria);

		${className}QueryCriteria.set${column.simpleJavaField?cap_first}(<#if column.queryType?? && (column.queryType == "between" || column.queryType == "in")><#if column.simpleJavaType == 'Date'>Lists.newArrayList(DateUtil.offset(UPDATED_${column.constantJavaField}, DateField.MINUTE, -1), DateUtil.offset(UPDATED_${column.constantJavaField}, DateField.MINUTE, 1))<#else>Lists.newArrayList(UPDATED_${column.constantJavaField}, UPDATED_${column.constantJavaField})</#if><#else>UPDATED_${column.constantJavaField}</#if>);
        // Get all the ${className}List where ${column.simpleJavaField} equals to UPDATED_${column.constantJavaField}
        default${ClassName}ShouldNotBeFound(${className}QueryCriteria);
    }
    </#if>
</#list>

    /**
     * Executes the search, and checks that the default entity is returned
     */
    private void default${ClassName}ShouldBeFound(${ClassName}QueryCriteria ${className}QueryCriteria) throws Exception {
		rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"?"+TestUtil.convertObjectToUrlParams(${className}QueryCriteria)))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.data.records").isArray())
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.records.[*].${column.simpleJavaField}").value(hasItem(${className}Dto.get${column.simpleJavaField?cap_first}())))
        <#elseif column.edit && column.null && (column.isNotBaseField || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.records.[*].${column.simpleJavaField}").value(hasItem(<#if column.simpleJavaType == "Date">DateUtil.formatDateTime(DEFAULT_${column.constantJavaField})<#elseif column.simpleJavaType == "Long">DEFAULT_${column.constantJavaField}.intValue()<#else>DEFAULT_${column.constantJavaField}</#if>)))
        </#if>
    </#list>;
    }

    /**
     * Executes the search, and checks that the default entity is not returned
     */
    private void default${ClassName}ShouldNotBeFound(${ClassName}QueryCriteria ${className}QueryCriteria) throws Exception {
		rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"?"+TestUtil.convertObjectToUrlParams(${className}QueryCriteria)))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.data.records").isArray())
            .andExpect(jsonPath("$.data.records").isEmpty());
    }


    @Test
    @Transactional
    public void getNonExisting${ClassName}() throws Exception {
        // Get the ${className}
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"{id}", Long.MAX_VALUE))
            .andExpect(status().isOk())
			.andExpect(jsonPath("$.data").isEmpty());
    }

    @Test
    @Transactional
    public void update${ClassName}() throws Exception {
        // Initialize the database
        ${className}Service.saveOrUpdate(${className}Dto);

        int databaseSizeBeforeUpdate = ${className}Service.list().size();

        // Update the ${className}
        ${ClassName} updated${ClassName} = ${className}Service.getById(${className}Dto.getId());
        // Disconnect from session so that the updates on updated${ClassName} are not directly saved in db
        ClassUtil.updateObj(updated${ClassName}, Lists.newArrayList(
    <#assign firstListField = true>
    <#list table.columnList as column>
		<#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>${ClassName}.F_${column.constantJavaField}
		</#if>
	</#list>
        ), <#assign firstListField = true><#list table.columnList as column>
		<#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>UPDATED_${column.constantJavaField}
		</#if>
	</#list>);

        ${ClassName}Dto ${className}Vo = ${className}Service.copyBeanToDto(updated${ClassName});
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Vo)))
            .andExpect(status().isOk());

        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.list();
        assertThat(${className}List).hasSize(databaseSizeBeforeUpdate);

        ${ClassName} test${ClassName} = ${className}List.stream().filter(item->${className}Dto.getId().equals(item.getId())).findAny().get();
    <#list table.columnList as column>
		<#if column.edit && (column.isNotBaseField || column.simpleJavaField == 'description')>
		assertThat(test${ClassName}.get${column.simpleJavaField?cap_first}()).isEqualTo(UPDATED_${column.constantJavaField});
		</#if>
	</#list>
    }


    @Test
    @Transactional
    public void delete${ClassName}() throws Exception {
        // Initialize the database
        ${className}Service.saveOrUpdate(${className}Dto);
        int databaseSizeBeforeDelete = ${className}Service.list().size();

        // Get the ${className}
        rest${ClassName}MockMvc.perform(delete(DEFAULT_API_URL)
			.contentType(TestUtil.APPLICATION_JSON_UTF8)
			.content(TestUtil.convertObjectToJsonBytes(Lists.newArrayList(${className}Dto.getId())))
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<${ClassName}> ${className}List = ${className}Service.list();
        assertThat(${className}List).hasSize(databaseSizeBeforeDelete - 1);
    }


}]]>
	</content>
</template>

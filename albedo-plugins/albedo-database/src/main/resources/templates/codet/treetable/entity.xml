<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>entity</name>
	<filePath>src/main/java/${packageName}/${moduleName}/domain/${subModuleName}</filePath>
	<fileName>${ClassName}.java</fileName>
	<content><![CDATA[
/*
 *  Copyright (c) 2019-2021  <a href="https://github.com/somowhere/albedo">Albedo</a>, somewhere (somewhere0813@gmail.com).
 *  <p>
 *  Licensed under the GNU Lesser General Public License 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  <p>
 * https://www.gnu.org/licenses/lgpl.html
 *  <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;


import javax.validation.constraints.*;
<#list table.importList as i>
import ${i};
</#list>
import javax.validation.constraints.NotNull;
import java.util.Date;

/**
 * ${functionName}Entity ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@TableName(value = "${table.name}")
@Data @ToString @NoArgsConstructor @AllArgsConstructor
public class ${ClassName} extends TreeEntity<${ClassName}> {

	private static final long serialVersionUID = 1L;
	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField && column.isNotBaseTreeField>
	/** F_${column.constantJavaField} ${column.nameAndTitle} */
	public static final String F_${column.constantJavaField} = "${column.simpleJavaField}";
		</#if>
	</#list>

	<@generateFields/>


    @Override
    public boolean equals(Object o) {
        return super.equals(o);
    }
    @Override
    public int hashCode() {
        return super.hashCode();
    }
}
<#macro generateFields>

	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField && column.isNotBaseTreeField>
	/** ${column.simpleJavaField} ${column.title} */<#if table.parentExists && table.parentTableFk == column.name>
	@TableField(exist = false)
	private ${table.parent.className} ${column.simpleJavaField};
	<#elseif column.showType == "userselect" || column.showType == "orgselect" || column.showType == "areaselect">
	@TableField(exist = false)
	private ${column.simpleJavaType} ${column.simpleJavaField};
	@TableField("${column.name}")
	private String ${column.simpleJavaField}Id;
	<#else>${column.hibernateValidatorExprssion}<#if column.dictType?? && column.dictType != "">@DictType("${column.dictType}")</#if>
	<#if column.name != column.simpleJavaField>@TableField("${column.name}")</#if>
	private ${column.simpleJavaType} ${column.simpleJavaField};
			</#if>
		</#if>
	</#list>
	<#list table.childList as c>
	@TableField(exist = false)
	private List<${column.className}> ${column.className?uncap_first}List = Lists.newArrayList();
	</#list>

</#macro>
<#macro generateCompositeIdConstructorIfis>

	<#if table.compositeId>
	public ${ClassName}(${ClassName}Id id) {
		this.id = id;
	}
	<#else>
	public ${ClassName}(${table.pkJavaType} id) {
		this.id = id;
	}
	</#if>
</#macro>
<#macro generatePkProperties>

</#macro>

<#macro generateNotPkProperties>
	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField && column.isNotBaseTreeField>
			<#if table.parentExists && table.parentTableFk == column.name>
	/** ${column.simpleJavaField} ${column.title} */
	public ${table.parent.className} get${column.simpleJavaField?cap_first}() {
		return ${column.simpleJavaField};
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}(${table.parent.className} ${column.simpleJavaField}) {
		this.${column.simpleJavaField} = ${column.simpleJavaField};
	}
			<#else>
	/** ${column.simpleJavaField} ${column.title} */
	public ${column.javaType} get${column.simpleJavaField?cap_first}() {
		return this.${column.simpleJavaField};
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}(${column.javaType} value) {
		this.${column.simpleJavaField} = value;
	}
			</#if>
			<#if column.showType == "userselect" || column.showType == "orgselect" || column.showType == "areaselect">
	/** ${column.simpleJavaField} ${column.title} */
	public String get${column.simpleJavaField?cap_first}Id() {
		return this.${column.simpleJavaField}Id;
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}Id(String value) {
		this.${column.simpleJavaField}Id = value;
	}
			</#if>
		</#if>
	</#list>
	<#list table.childList as table>
	public List<${table.className}> get${table.className}List() {
		return ${table.className?uncap_first}List;
	}

	public void set${table.className}List(List<${table.className}> ${table.className?uncap_first}List) {
		this.${table.className?uncap_first}List = ${table.className?uncap_first}List;
	}
	</#list>
</#macro>
]]>
	</content>
</template>

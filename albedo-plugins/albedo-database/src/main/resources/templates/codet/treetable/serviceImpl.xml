<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/java/${packageName}/${moduleName}/service/${subModuleName}/impl</filePath>
	<fileName>${ClassName}ServiceImpl.java</fileName>
	<content><![CDATA[
/*
 *  Copyright (c) 2019-2022  <a href="https://github.com/somowhere/albedo">Albedo</a>, somewhere (somewhere0813@gmail.com).
 *  <p>
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  <p>
 * https://www.gnu.org/licenses/lgpl.html
 *  <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.impl;


import com.albedo.java.common.core.exception.EntityExistException;
import com.albedo.java.common.core.util.ObjectUtil;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.albedo.java.plugins.database.mybatis.service.impl.AbstractTreeServiceImpl;
import ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Do;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dto;
import ${packageName}.${moduleName}.repository<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Repository;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;


/**
 * ${functionName}Service ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class ${ClassName}ServiceImpl extends AbstractTreeServiceImpl<${ClassName}Repository, ${ClassName}Do, ${ClassName}Dto> implements ${ClassName}Service{
	<#list table.columnList as column><#if column.uniqueField && !column.pk>
	public Boolean exit${ClassName}By${column.simpleJavaField?cap_first}(${ClassName}Dto ${className}Dto) {
		return getOne(Wrappers.<${ClassName}Do>lambdaUpdate()
			.ne(ObjectUtil.isNotEmpty(${className}Dto.getId()), ${ClassName}Do::getId, ${className}Dto.getId())
			.eq(${ClassName}Do::get${column.simpleJavaField?cap_first}, ${className}Dto.get${column.simpleJavaField?cap_first}())) != null;
	}
	</#if></#list>
	@Override
	public void saveOrUpdate(${ClassName}Dto ${className}Dto) {
		<#list table.columnList as column><#if column.uniqueField && !column.pk>
		// ${column.simpleJavaField} before comparing with database
		if (exit${ClassName}By${column.simpleJavaField?cap_first}(${className}Dto)) {
			throw new EntityExistException(${ClassName}Dto.class, "${column.simpleJavaField}", ${className}Dto.get${column.simpleJavaField?cap_first}());
		}
		</#if></#list>
		super.saveOrUpdate(${className}Dto);
	}
}
]]>
	</content>
</template>

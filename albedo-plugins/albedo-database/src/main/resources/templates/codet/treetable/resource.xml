<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>resource</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Resource.java</fileName>
	<content><![CDATA[
/*
 *  Copyright (c) 2019-2021  <a href="https://github.com/somowhere/albedo">Albedo</a>, somewhere (somewhere0813@gmail.com).
 *  <p>
 *  Licensed under the GNU Lesser General Public License 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  <p>
 * https://www.gnu.org/licenses/lgpl.html
 *  <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.albedo.java.common.core.constant.CommonConstants;
import com.albedo.java.common.core.util.BeanUtil;
import com.albedo.java.common.core.util.Result;
import com.albedo.java.common.core.util.tree.TreeUtil;
import com.albedo.java.common.core.vo.PageModel;
import com.albedo.java.common.log.annotation.LogOperate;
import com.albedo.java.common.web.resource.BaseResource;
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Vo;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dto;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}QueryCriteria;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.google.common.collect.Lists;
import lombok.AllArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.Api;

import javax.validation.Valid;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping(value = "${r"${application.admin-path}"}/${urlPrefix}")
@AllArgsConstructor
@Api(tags = "${functionNameSimple}")
public class ${ClassName}Resource extends BaseResource {
	private final ${ClassName}Service service;
    /**
	 * GET / : 获取数据 ${functionNameSimple}.
	 *
	 * @param id
	 * @return
	 */
	@GetMapping(CommonConstants.URL_ID_REGEX)
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	public Result get(@PathVariable String id) {
		log.debug("REST request to get Entity : {}", id);
		return Result.buildOkData(service.getOneDto(id));
	}
    /**
	 * GET / : 获取树型结构数据 ${functionNameSimple}.
	 *
	 * @param ${className}QueryCriteria
	 * @return the ResponseEntity with status 200 (OK) and with body all tree ${className}
	 */
	@GetMapping(value = "/tree")
	public Result tree(${ClassName}QueryCriteria ${className}QueryCriteria) {
		return Result.buildOkData(service.findTreeNode(${className}QueryCriteria));
	}
	/**
	 * GET / : 查询${functionNameSimple}.
	 *
	 * @param ${className}QueryCriteria
	 * @return 分页对象
	 */
	@GetMapping
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	@LogOperate(value = "${functionNameSimple}分页查看")
	@ApiOperation("${functionNameSimple}分页查看")
	public Result<IPage<${ClassName}Vo>> findTreeList(${ClassName}QueryCriteria ${className}QueryCriteria) {
		List<${ClassName}Vo> ${className}VoList = service.findTreeList(${className}QueryCriteria).stream()
			.map(item -> BeanUtil.copyPropertiesByClass(item, ${ClassName}Vo.class)).collect(Collectors.toList());
		return Result.buildOkData(new PageModel<>(Lists.newArrayList(TreeUtil.buildByLoopAutoRoot(${className}VoList)),
			${className}VoList.size()));
	}

	/**
	 * POST / : 保存 a ${functionNameSimple}Vo.
	 *
	 * @param {className}Vo
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_edit')")
	@PostMapping
	@LogOperate(value = "${functionName}编辑")
	@ApiOperation("${functionNameSimple}编辑")
	public Result save(@Valid @RequestBody ${ClassName}Dto ${className}Vo) {
		log.debug("REST request to save ${ClassName} : {}", ${className}Vo);
		service.saveOrUpdate(${className}Vo);
		return Result.buildOk("保存${functionNameSimple}成功");
	}

	/**
	 * DELETE //:id : delete the "id" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to delete
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_del')")
	@DeleteMapping
	@LogOperate(value = "${functionName}删除")
	@ApiOperation("${functionNameSimple}删除")
	public Result delete(@RequestBody Set<String> ids) {
		log.debug("REST request to delete ${ClassName}: {}", ids);
		service.removeByIds(ids);
		return Result.buildOk("删除${functionNameSimple}成功");
	}

}]]>
	</content>
</template>

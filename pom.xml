<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~  Copyright (c) 2019-2020, somowhere (somewhere0813@gmail.com).
  ~  <p>
  ~  Licensed under the GNU Lesser General Public License 3.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~  <p>
  ~ https://www.gnu.org/licenses/lgpl.html
  ~  <p>
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.albedo.java</groupId>
	<artifactId>albedo-cloud</artifactId>
	<version>${revision}</version>
	<name>${project.artifactId}</name>
	<packaging>pom</packaging>
	<url>https://www.albedo.com</url>

	<properties>
		<revision>3.3.3-SNAPSHOT</revision>
		<spring-boot.version>2.7.3</spring-boot.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.version>3.8.0</maven.compiler.version>
		<docker.plugin.version>0.32.0</docker.plugin.version>
		<docker.host>http://192.168.1.100:8088/</docker.host>
		<docker.registry>192.168.1.100</docker.registry>
		<docker.namespace>library</docker.namespace>
		<docker.username>admin</docker.username>
		<docker.password>Harbor123</docker.password>
		<git.commit.plugin>4.9.9</git.commit.plugin>
		<spring.checkstyle.plugin>0.0.32</spring.checkstyle.plugin>

		<profile.dev.log.level>DEBUG</profile.dev.log.level>
		<profile.prod.log.level>INFO</profile.prod.log.level>
	</properties>

	<!-- 以下依赖 全局所有的模块都会引入  -->
	<dependencies>
		<!--配置文件处理器-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!--配置文件加解密-->
		<dependency>
			<groupId>com.github.ulisesbocchio</groupId>
			<artifactId>jasypt-spring-boot-starter</artifactId>
		</dependency>
		<!--监控-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--监控客户端-->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
		</dependency>
		<!--Lombok-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<!--测试依赖-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<modules>
		<module>albedo-gateway</module>
		<module>albedo-auth</module>
		<module>albedo-modules</module>
		<module>albedo-common</module>
		<module>albedo-plugins</module>
		<module>albedo-register</module>
		<module>albedo-dependencies</module>
	</modules>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.albedo.java</groupId>
				<artifactId>albedo-dependencies</artifactId>
				<version>${revision}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>

				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot.version}</version>
					<configuration>
						<finalName>${project.build.finalName}</finalName>
						<layers>
							<enabled>true</enabled>
						</layers>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${docker.plugin.version}</version>
					<configuration>
						<!-- Docker Remote Api-->
						<dockerHost>${docker.host}</dockerHost>
						<!-- Docker 镜像私服-->
						<registry>${docker.registry}</registry>
						<!-- 认证信息-->
						<authConfig>
							<push>
								<username>${docker.username}</username>
								<password>${docker.password}</password>
							</push>
						</authConfig>
						<images>
							<image>
								<name>${docker.registry}/${docker.namespace}/${project.name}:${project.version}</name>
								<build>
									<dockerFile>${project.basedir}/Dockerfile</dockerFile>
								</build>
							</image>
						</images>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<target>${maven.compiler.target}</target>
					<source>${maven.compiler.source}</source>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<!--打包jar 与git commit 关联插件-->
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<version>${git.commit.plugin}</version>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
						<phase>initialize</phase>
					</execution>
				</executions>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<!--因为项目定制了jackson的日期时间序列化/反序列化格式，因此这里要进行配置,不然通过management.info.git.mode=full进行完整git信息监控时会存在问题-->
					<dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
					<includeOnlyProperties>
						<includeOnlyProperty>^git.build.(time|version)$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.(id|message|time).*$</includeOnlyProperty>
					</includeOnlyProperties>
				</configuration>
			</plugin>
			<!--代码格式插件，默认使用spring 规则-->
			<plugin>
				<groupId>io.spring.javaformat</groupId>
				<artifactId>spring-javaformat-maven-plugin</artifactId>
				<version>${spring.checkstyle.plugin}</version>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.plugin.version}</version>
				<configuration>
					<!-- Docker Remote Api-->
					<dockerHost>${docker.host}</dockerHost>
					<!-- Docker 镜像私服-->
					<registry>${docker.registry}</registry>
					<!-- 认证信息-->
					<authConfig>
						<push>
							<username>${docker.username}</username>
							<password>${docker.password}</password>
						</push>
					</authConfig>
					<images>
						<image>
							<name>${docker.registry}/${docker.namespace}/${project.name}:${project.version}</name>
							<build>
								<dockerFile>${project.basedir}/Dockerfile</dockerFile>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
			<!--			<plugin>-->
			<!--				<groupId>org.apache.maven.plugins</groupId>-->
			<!--				<artifactId>maven-resources-plugin</artifactId>-->
			<!--				<executions>-->
			<!--					<execution>-->
			<!--						<id>default-resources</id>-->
			<!--						<phase>validate</phase>-->
			<!--						<goals>-->
			<!--							<goal>copy-resources</goal>-->
			<!--						</goals>-->
			<!--						<configuration>-->
			<!--							<outputDirectory>${project.build.directory}/classes</outputDirectory>-->
			<!--							<useDefaultDelimiters>false</useDefaultDelimiters>-->
			<!--							<delimiters>-->
			<!--								<delimiter>#</delimiter>-->
			<!--							</delimiters>-->
			<!--							<resources>-->
			<!--								<web>-->
			<!--									<directory>src/main/resources/</directory>-->
			<!--									<filtering>true</filtering>-->
			<!--									<includes>-->
			<!--										<include>*.yml</include>-->
			<!--									</includes>-->
			<!--								</web>-->
			<!--								<web>-->
			<!--									<directory>src/main/resources/</directory>-->
			<!--									<filtering>false</filtering>-->
			<!--									<excludes>-->
			<!--										<exclude>*.yml</exclude>-->
			<!--									</excludes>-->
			<!--								</web>-->
			<!--							</resources>-->
			<!--						</configuration>-->
			<!--					</execution>-->
			<!--				</executions>-->
			<!--			</plugin>-->
		</plugins>
	</build>

<!--	<repositories>-->
<!--		&lt;!&ndash;阿里云主仓库，代理了maven central和jcenter仓库&ndash;&gt;-->
<!--		<repository>-->
<!--			<id>aliyun</id>-->
<!--			<name>aliyun</name>-->
<!--			<url>https://maven.aliyun.com/repository/public</url>-->
<!--			<releases>-->
<!--				<enabled>true</enabled>-->
<!--			</releases>-->
<!--			<snapshots>-->
<!--				<enabled>false</enabled>-->
<!--			</snapshots>-->
<!--		</repository>-->
<!--		&lt;!&ndash;阿里云代理Spring 官方仓库&ndash;&gt;-->
<!--		<repository>-->
<!--			<id>spring-milestones</id>-->
<!--			<name>Spring Milestones</name>-->
<!--			<url>https://maven.aliyun.com/repository/spring</url>-->
<!--			<releases>-->
<!--				<enabled>true</enabled>-->
<!--			</releases>-->
<!--			<snapshots>-->
<!--				<enabled>false</enabled>-->
<!--			</snapshots>-->
<!--		</repository>-->
<!--	</repositories>-->
<!--	<pluginRepositories>-->
<!--		&lt;!&ndash;阿里云代理Spring 插件仓库&ndash;&gt;-->
<!--		<pluginRepository>-->
<!--			<id>spring-plugin</id>-->
<!--			<name>spring-plugin</name>-->
<!--			<url>https://maven.aliyun.com/repository/spring-plugin</url>-->
<!--			<releases>-->
<!--				<enabled>true</enabled>-->
<!--			</releases>-->
<!--			<snapshots>-->
<!--				<enabled>false</enabled>-->
<!--			</snapshots>-->
<!--		</pluginRepository>-->
<!--	</pluginRepositories>-->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!--  log configuration -->
				<logback.loglevel>${profile.dev.log.level}</logback.loglevel>
				<!-- default Spring profiles -->
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<!--  log configuration -->
				<logback.loglevel>${profile.prod.log.level}</logback.loglevel>
				<!-- default Spring profiles -->
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>
		</profile>
	</profiles>
</project>
